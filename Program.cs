namespace ktsu;

using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using CommandLine;
using ktsu.io.CaseConverter;

internal enum CaseType
{
	Lower,
	Upper,
	Title,
	Pascal,
	Camel,
	Snake,
	Kebab,
	Macro,
}

internal static class Program
{
	private static List<string> Adjectives { get; } =
	[
		"Adorable",
		"Adventurous",
		"Aggressive",
		"Agreeable",
		"Alert",
		"Alive",
		"Amused",
		"Angry",
		"Annoyed",
		"Annoying",
		"Anxious",
		"Arrogant",
		"Ashamed",
		"Attractive",
		"Average",
		"Awful",
		"Bad",
		"Beautiful",
		"Better",
		"Bewildered",
		"Black",
		"Blue",
		"Bloody",
		"Blue-eyed",
		"Blushing",
		"Bored",
		"Brainy",
		"Brave",
		"Breakable",
		"Bright",
		"Busy",
		"Calm",
		"Careful",
		"Cautious",
		"Charming",
		"Cheerful",
		"Clean",
		"Clear",
		"Clever",
		"Cloudy",
		"Clumsy",
		"Colorful",
		"Combative",
		"Comfortable",
		"Concerned",
		"Condemned",
		"Confused",
		"Cooperative",
		"Courageous",
		"Crazy",
		"Creepy",
		"Crowded",
		"Cruel",
		"Curious",
		"Cute",
		"Dead",
		"Defeated",
		"Defiant",
		"Delightful",
		"Depressed",
		"Determined",
		"Different",
		"Difficult",
		"Disgusted",
		"Distinct",
		"Dizzy",
		"Doubtful",
		"Drab",
		"Dull",
		"Eager",
		"Easy",
		"Elated",
		"Elegant",
		"Embarrassed",
		"Enchanting",
		"Encouraging",
		"Energetic",
		"Enthusiastic",
		"Envious",
		"Evil",
		"Excited",
		"Expensive",
		"Exuberant",
		"Fair",
		"Faithful",
		"Famous",
		"Fancy",
		"Fantastic",
		"Fierce",
		"Filthy",
		"Fine",
		"Flagrant",
		"Flaky",
		"Flat",
		"Fluffy",
		"Fluttering",
		"Foolish",
		"Fragile",
		"Frail",
		"Frantic",
		"Fresh",
		"Friendly",
		"Frightened",
		"Funny",
		"Gentle",
		"Gifted",
		"Glamorous",
		"Glum",
		"Good",
		"Graceful",
		"Grateful",
		"Greedy",
		"Green",
		"Grotesque",
		"Grumpy",
		"Handsome",
		"Happy",
		"Healthy",
		"Helpful",
		"Helpless",
		"Hilarious",
		"Homeless",
		"Homely",
		"Horrible",
		"Hungry",
		"Hurt",
		"Icy",
		"Ill",
		"Important",
		"Impossible",
		"Inexpensive",
		"Innocent",
		"Inquisitive",
		"Jittery",
		"Jolly",
		"Joyous",
		"Kind",
		"Lackadaisical",
		"Lamentable",
		"Lazy",
		"Light",
		"Lively",
		"Lonely",
		"Long",
		"Lucky",
		"Lush",
		"Mad",
		"Maniacal",
		"Melancholy",
		"Mysterious",
		"Naughty",
		"Nervous",
		"Nice",
		"Nutty",
		"Obedient",
		"Obnoxious",
		"Odd",
		"Old-fashioned",
		"Open",
		"Outrageous",
		"Outstanding",
		"Panicky",
		"Perfect",
		"Plain",
		"Pleasant",
		"Poised",
		"Poor",
		"Powerful",
		"Precious",
		"Prickly",
		"Proud",
		"Puzzled",
		"Quaint",
		"Real",
		"Relieved",
		"Repulsive",
		"Rich",
		"Scary",
		"Selfish",
		"Shiny",
		"Shy",
		"Silly",
		"Sleepy",
		"Smiling",
		"Smoggy",
		"Sore",
		"Sparkling",
		"Splendid",
		"Spotless",
		"Stormy",
		"Strange",
		"Stupid",
		"Successful",
		"Super",
		"Talented",
		"Tame",
		"Tender",
		"Tense",
		"Terrible",
		"Thankful",
		"Thoughtful",
		"Thoughtless",
		"Tired",
		"Tough",
		"Troubled",
		"Ugly",
		"Uninterested",
		"Unsightly",
		"Unusual",
		"Upset",
		"Uptight",
		"Vast",
		"Victorious",
		"Vivacious",
		"Wandering",
		"Weary",
		"Wicked",
		"Wide-eyed",
		"Wild",
		"Witty",
		"Worried",
		"Worrisome",
		"Wrong",
		"Zany",
		"Zealous",
		"Ambitious",
		"Chilly",
		"Dashing",
		"Ebullient",
		"Flamboyant",
		"Gloomy",
		"Heartwarming",
		"Inspiring",
		"Jovial",
		"Kooky",
		"Luxurious",
		"Majestic",
		"Nostalgic",
		"Oblivious",
		"Perceptive",
		"Quirky",
		"Radiant",
		"Sassy",
		"Turbulent",
		"Uncanny",
		"Whimsical",
		"Yearning",
		"Zippy"
	];

	private static List<string> Animals { get; } =
	[
		"Aardvark",
		"Albatross",
		"Alligator",
		"Alpaca",
		"Ant",
		"Anteater",
		"Antelope",
		"Ape",
		"Armadillo",
		"Donkey",
		"Baboon",
		"Badger",
		"Barracuda",
		"Bat",
		"Bear",
		"Beaver",
		"Bee",
		"Bison",
		"Boar",
		"Buffalo",
		"Butterfly",
		"Camel",
		"Capybara",
		"Caribou",
		"Cassowary",
		"Cat",
		"Caterpillar",
		"Cattle",
		"Chamois",
		"Cheetah",
		"Chicken",
		"Chimpanzee",
		"Chinchilla",
		"Chough",
		"Clam",
		"Cobra",
		"Cockroach",
		"Cod",
		"Cormorant",
		"Coyote",
		"Crab",
		"Crane",
		"Crocodile",
		"Crow",
		"Curlew",
		"Deer",
		"Dinosaur",
		"Dog",
		"Dogfish",
		"Dolphin",
		"Donkey",
		"Dotterel",
		"Dove",
		"Dragonfly",
		"Duck",
		"Dugong",
		"Dunlin",
		"Eagle",
		"Echidna",
		"Eel",
		"Eland",
		"Elephant",
		"Elk",
		"Emu",
		"Falcon",
		"Ferret",
		"Finch",
		"Fish",
		"Flamingo",
		"Fly",
		"Fox",
		"Frog",
		"Gaur",
		"Gazelle",
		"Gerbil",
		"Giraffe",
		"Gnat",
		"Gnu",
		"Goat",
		"Goldfinch",
		"Goldfish",
		"Goose",
		"Gorilla",
		"Goshawk",
		"Grasshopper",
		"Grouse",
		"Gull",
		"Hamster",
		"Hare",
		"Hawk",
		"Hedgehog",
		"Heron",
		"Hippopotamus",
		"Hornet",
		"Horse",
		"Hummingbird",
		"Hyena",
		"Ibex",
		"Ibis",
		"Iguana",
		"Impala",
		"Jackal",
		"Jaguar",
		"Jellyfish",
		"Kangaroo",
		"Kingfisher",
		"Koala",
		"Kookaburra",
		"Kouprey",
		"Kudu",
		"Lapwing",
		"Lark",
		"Lemur",
		"Leopard",
		"Lion",
		"Llama",
		"Lobster",
		"Locust",
		"Loris",
		"Louse",
		"Lyrebird",
		"Magpie",
		"Mallard",
		"Manatee",
		"Mandrill",
		"Mantis",
		"Marten",
		"Meerkat",
		"Mink",
		"Mole",
		"Mongoose",
		"Monkey",
		"Moose",
		"Mosquito",
		"Mouse",
		"Mule",
		"Narwhal",
		"Newt",
		"Nightingale",
		"Octopus",
		"Okapi",
		"Opossum",
		"Oryx",
		"Ostrich",
		"Otter",
		"Owl",
		"Oyster",
		"Panther",
		"Parrot",
		"Partridge",
		"Peafowl",
		"Pelican",
		"Penguin",
		"Pheasant",
		"Pig",
		"Pigeon",
		"Polar Bear",
		"Pony",
		"Porcupine",
		"Porpoise",
		"Quail",
		"Quelea",
		"Quetzal",
		"Rabbit",
		"Raccoon",
		"Rail",
		"Ram",
		"Rat",
		"Raven",
		"Red Deer",
		"Red Panda",
		"Reindeer",
		"Rhinoceros",
		"Rook",
		"Salamander",
		"Salmon",
		"Sand Dollar",
		"Sandpiper",
		"Sardine",
		"Scorpion",
		"Seahorse",
		"Seal",
		"Shark",
		"Sheep",
		"Shrew",
		"Skunk",
		"Snail",
		"Snake",
		"Sparrow",
		"Spider",
		"Spoonbill",
		"Squid",
		"Squirrel",
		"Starling",
		"Stingray",
		"Stinkbug",
		"Stork",
		"Swallow",
		"Swan",
		"Tapir",
		"Tarsier",
		"Termite",
		"Tiger",
		"Toad",
		"Trout",
		"Turkey",
		"Turtle",
		"Viper",
		"Vulture",
		"Wallaby",
		"Walrus",
		"Wasp",
		"Weasel",
		"Whale",
		"Wildcat",
		"Wolf",
		"Wolverine",
		"Wombat",
		"Woodcock",
		"Woodpecker",
		"Worm",
		"Wren",
		"Yak",
		"Zebra",
		"Adder",
		"Aye-aye",
		"Beetle",
		"Bonobo",
		"Bumblebee",
		"Caiman",
		"Cicada",
		"Coati",
		"Cockatoo",
		"Cuckoo",
		"Dhole",
		"Dingo",
		"Echidna",
		"Eider",
		"Fennec",
		"Galago",
		"Gecko",
		"Gibbon",
		"Harrier",
		"Hawk",
		"Hoatzin",
		"Hoopoe",
		"Ibex",
		"Jackrabbit",
		"Kiwi",
		"Loris",
		"Manatee",
		"Margay",
		"Markhor",
		"Numbat",
		"Nyala",
		"Okapi",
		"Olingo",
		"Orangutan",
		"Pangolin",
		"Peccary",
		"Piranha",
		"Potoroo",
		"Quokka",
		"Ratel",
		"Rhea",
		"Serval",
		"Sifaka",
		"Sitatunga",
		"Sloth",
		"Tamarin",
		"Tarantula",
		"Terrapin",
		"Tortoise",
		"Uakari",
		"Vicuna",
		"Wombat",
		"Xerus",
		"Zebu",
	];

	[RequiresDynamicCode("Calls ktsu.Program.Generate(Arguments)")]
	private static void Main(string[] args)
		=> Parser.Default.ParseArguments<Arguments>(args).WithParsed(Generate);

	[RequiresDynamicCode("Calls System.Enum.GetValues(Type)")]
	private static void Generate(Arguments args)
	{
		if (!Enum.TryParse(args.CaseType.ToPascalCase(), out CaseType caseType))
		{
			Console.WriteLine($"Invalid case type: {args.CaseType}");
			Console.WriteLine("Valid options:");
			foreach (var validCaseType in Enum.GetValues<CaseType>())
			{
				Console.WriteLine(validCaseType.ToString().ToLowerInvariant());
			}
			return;
		}

		var random = new Random((int)DateTime.Now.Ticks);
		var results = new HashSet<string>();
		int failCount = 0;

		var candidateAdjectives = args.FirstLetter > char.MinValue
			? Adjectives.Where(a => a.StartsWith(args.FirstLetter.ToString(), StringComparison.InvariantCultureIgnoreCase))
			: Adjectives.AsEnumerable();

		var candidateAnimals = args.FirstLetter > char.MinValue
			? Animals.Where(a => a.StartsWith(args.FirstLetter.ToString(), StringComparison.InvariantCultureIgnoreCase))
			: Animals.AsEnumerable();

		int countAdjectives = candidateAdjectives.Count();

		while (results.Count < args.Amount && failCount < 1000)
		{
			string adjective = candidateAdjectives.Skip(random.Next(countAdjectives)).First();
			var alliteratedAnimals = args.Alliterate
				? candidateAnimals.Where(a => a.StartsWith(adjective[..1], StringComparison.InvariantCultureIgnoreCase))
				: candidateAnimals;

			int countAnimals = alliteratedAnimals.Count();

			string animal = alliteratedAnimals.Skip(random.Next(countAnimals)).First();
			string result = $"{adjective} {animal}";

			if (!results.Add(result))
			{
				failCount++;
			}
		}

		foreach (string result in results)
		{
			string casedResult = caseType switch
			{
				CaseType.Lower => result.ToLower(),
				CaseType.Upper => result.ToUpper(),
				CaseType.Title => result,
				CaseType.Pascal => result.ToPascalCase(),
				CaseType.Camel => result.ToCamelCase(),
				CaseType.Snake => result.ToSnakeCase(),
				CaseType.Kebab => result.ToKebabCase(),
				CaseType.Macro => result.ToMacroCase(),
				_ => throw new NotImplementedException(),
			};
			Console.WriteLine(casedResult);
		}

		if (args.Pause)
		{
			Console.WriteLine("Press any key to exit...");
			Console.ReadKey();
		}
	}
}



